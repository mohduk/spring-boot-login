<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ECommerce.Api</name>
    </assembly>
    <members>
        <member name="M:ECommerce.Api.Controllers.AuthController.Login(ECommerce.Models.ViewModels.LoginViewModel)">
            <summary>
            Verify the combination of email and password to grant user access to use E-Mall.
            </summary>
            <param name="loginInput">
            Provides the necessary email and password combination for authentication
            </param>
            <returns>
            An authentication result object that contains a status code. If authentication is
            successful, a user is included for creation of claims. Otherwise, an error message
            is included to indicate the failure reason.
            </returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.AuthController.Register(ECommerce.Models.ViewModels.RegisterViewModel)">
            <summary>
            Take input from user to register a new account
            </summary>
            <param name="registerInput">
            Provide necessary information for registering a new user in the database
            </param>
            <returns>
            Similarly return an authentication result object that contains a status 
            code to indicate success or failure.
            </returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.AuthController.ChangePassword(ECommerce.Models.ViewModels.ChangePasswordModel)">
            <summary>
            Accepts a combination of user ID, current password and new password for password change.
            </summary>
            <param name="input"></param>
            <returns>
            Returns boolean to indicate success or failure.
            </returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.CartsController.GetAll(System.String)">
            <summary>
            Retrieve all the items in the shopping cart of a specific user.
            </summary>
            <param name="userId">User ID</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.CartsController.GetCount(System.String)">
            <summary>
            Retrive the total number of items in a user's shopping cart. 
            </summary>
            <param name="userId">User ID</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.CartsController.GetCartItemBasedOnUserIdAndProductId(System.String,System.Int64)">
            <summary>
            Retrieve the details of a specific cart item based on user ID and product ID.
            </summary>
            <param name="userId">User ID</param>
            <param name="productId">Product ID</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.CartsController.GetCartItemBasedOnCartId(System.Int64)">
            <summary>
            Retrieve the details of a specific cart item based on cart item ID.
            </summary>
            <param name="cartId"></param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.CartsController.Add(ECommerce.Models.CartItem)">
            <summary>
            Add an item to a user's shopping cart.
            </summary>
            <param name="cartItem">Cart Item ID</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.CartsController.Update(System.Int64,ECommerce.Models.CartItem)">
            <summary>
            Update an item (e.g. count) in user's shopping cart.
            </summary>
            <param name="id">Cart Item ID</param>
            <param name="cartItem">Cart Item Object</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.CartsController.Delete(System.Int64)">
            <summary>
            Remove an item from user's shopping cart.
            </summary>
            <param name="id">Cart Item ID</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.CategoriesController.GetAll">
            <summary>
            Retrieve all existing categories in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.CategoriesController.Get(System.Int64)">
            <summary>
            Retrieve a specific category.
            </summary>
            <param name="id">Category ID</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.CategoriesController.Add(ECommerce.Models.Category)">
            <summary>
            Add a new category to the database. This checks for duplicate category name.
            </summary>
            <param name="category">Category Object</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.CategoriesController.Update(System.Int64,ECommerce.Models.Category)">
            <summary>
            Update an existing category in the database. This checks for duplicate category name.
            </summary>
            <param name="id">Category ID</param>
            <param name="category">Category Object</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.CategoriesController.Delete(System.Int64,System.String)">
            <summary>
            Remove an existing category from database.
            </summary>
            <param name="id">Category ID</param>
            <param name="userId">User ID</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.OrdersController.GetAllOrdersOfStatus(System.String)">
            <summary>
            Get all orders of a specific status.
            </summary>
            <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.OrdersController.GetAllOrdersForUserById(System.String,System.String)">
            <summary>
            Get all orders of a specific status for a specific user.
            </summary>
            <param name="userId">User ID</param>
            <param name="status">Order status, e.g. Approved, Processing, Shipped, Complete, Cancelled</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.OrdersController.GetOrderById(System.Int64)">
            <summary>
            Retrieve a specific order.
            </summary>
            <param name="orderId">Order ID</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.OrdersController.GetOrderDetailsByOrderId(System.Int64)">
            <summary>
            Retrieve a specific order and its order items.
            </summary>
            <param name="orderId">Order ID</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.OrdersController.Create(ECommerce.Models.ViewModels.ShoppingCartVM)">
            <summary>
            Create an order from a user's shopping cart upon place order.
            </summary>
            <param name="shoppingCart">Shopping Cart Object</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.OrdersController.Update(System.Int64,ECommerce.Models.Order)">
            <summary>
            Update an existing order.
            </summary>
            <param name="orderId"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.ProductsController.GetAll">
            <summary>
            Get all products from the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.ProductsController.Get(System.Int64)">
            <summary>
            Get a specific product from the database.
            </summary>
            <param name="id">Product ID</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.ProductsController.Add(ECommerce.Models.ViewModels.ProductViewModel)">
            <summary>
            Add a new product to the database.
            </summary>
            <param name="productVM">ProductViewModel Object</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.ProductsController.Update(System.Int64,ECommerce.Models.ViewModels.ProductViewModel)">
            <summary>
            Update an existing product in the database.
            </summary>
            <param name="id">Product ID</param>
            <param name="productVM">ProductViewModel Object</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.ProductsController.Delete(System.Int64,System.String)">
            <summary>
            Mark a product as not available instead of truly deleting it.
            </summary>
            <param name="id">Product ID</param>
            <param name="userId">User ID</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.StatusController.Index">
            <summary>
            Just to check if the API server is up.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.UsersController.GetAll(System.String)">
            <summary>
            Retrieve all users from the database based on role. 
            </summary>
            <param name="role">Role string, e.g. Admin, Customer</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.UsersController.Get(System.String)">
            <summary>
            Get the details of a specific user.
            </summary>
            <param name="userId">User ID</param>
            <returns></returns>
        </member>
        <member name="M:ECommerce.Api.Controllers.UsersController.Update(ECommerce.Models.ApplicationUser)">
            <summary>
            Update an existing user in the database.
            </summary>
            <param name="user">ApplicationUser Object</param>
            <returns></returns>
        </member>
    </members>
</doc>
